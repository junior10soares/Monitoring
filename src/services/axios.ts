import axios, { InternalAxiosRequestConfig } from "axios";

export const axiosInstance = axios.create({
	baseURL: "http://localhost:8085/api",
	headers: {
		common: {
			Authorization:
				"Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI5ZzNld1lTWExtSVFZemVrMGJpenl5OGhNVkUzb3NDYkNPY1BsVzZkeEJBIn0.eyJleHAiOjE3MDk1OTIwMjgsImlhdCI6MTcwOTE2MDAyOCwiYXV0aF90aW1lIjoxNzA5MTYwMDI4LCJqdGkiOiI2ZTI5ZjA5NC1jODEyLTQ4ZTgtOGRmYy03YzU5MzlkNDNmZjYiLCJpc3MiOiJodHRwczovL2Rldi5sb2dpbi5tdC5nb3YuYnIvYXV0aC9yZWFsbXMvbXQtcmVhbG0iLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMjQyYWE5YjEtY2FhZC00MWIzLTllNTItYzU2ZTFjZjY3NjQ5IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoicHJvamV0by10ZW1wbGF0ZS1pbnRlZ3JhY2FvIiwic2Vzc2lvbl9zdGF0ZSI6IjNhMjg5OTA5LTgwMTMtNDMwMC1hMTk3LThhMzNkZjkzODM1YiIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsibXQtbG9naW4iLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1tdC1yZWFsbSJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoicHJvZmlsZSBlbWFpbCIsInNpZCI6IjNhMjg5OTA5LTgwMTMtNDMwMC1hMTk3LThhMzNkZjkzODM1YiIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwibmFtZSI6IlVTVUFSSU8gREUgVEVTVEUiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI0NTc3MTc1NzAzOSIsImdpdmVuX25hbWUiOiJVU1VBUklPIiwiZGF0YU5hc2NpbWVudG8iOiIxMi8xMi8xOTgwIiwiZmFtaWx5X25hbWUiOiJERSBURVNURSIsIm5vbWVNYWUiOiJNQUUgRE8gVVNVQVJJTyBERSBURVNURSIsImVtYWlsIjoid3N0LTA5QGhvdG1haWwuY29tIn0.MK9Gepi7yFKraB1dRXdvYjOqgxv1SHrvXG6Q9EuwuIx9WiUDc5y8wPFyY12k3iXpAbDLg6hmmRmmzmHVFbZnNRVCle7xjCKcc7OWg8CPNJsAP_qyg31cH5fD38rXcKmBdAXCsp8Hq0ZYthnjjel1q-xVTU_TSMqfOXFw7ZJBMc497I66XaCJeiVMqJT7Io1zvJ0kAxCASUI90_95IXVsGRmTAC_gZG39xNFIlZf7F1CaVfySKtZWMdR_rrb8SQu2KAr5dLAlZowC4IefRNRortSsFIjh-b_Vlqpjy6s3eO7tyg-wHAefsjpvF7-TPvXOe9G4sVsrXs4nfwiIpdA34g",
		},
	},
});

// Interceptors
axiosInstance.interceptors.request.use(
	(config): InternalAxiosRequestConfig => {
		return config;
	},
	(error): any => {
		console.log(error);
		return Promise.reject(error);
	},
);

axiosInstance.interceptors.response.use(
	async (response): Promise<any> => {
		return response;
	},
	async (error): Promise<any> => {
		console.log(error);
		return Promise.reject(error);
	},
);
